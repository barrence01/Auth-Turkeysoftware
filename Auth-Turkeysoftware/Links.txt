https://macoratti.net/22/06/aspnc_jwtrfsh1.htm

# Para instalar os certificados necessários para rodar o visual studio
# Deve ser criada a pasta abaixo:
%APPDATA%\ASP.NET\https    

# Execute os comandos abaixo:
dotnet dev-certs https --clean
dotnet dev-certs https --trust

dotnet tool update -g linux-dev-certs
dotnet linux-dev-certs install

dotnet tool install --global dotnet-ef

# Para acessar o localhost da maquina windows por dentro do WSL, utilize-o em modo mirrored
# Crie arquivo .wslconfig na pasta %appdata%
[wsl2]
networkingMode=mirrored


# Para instalar o SDK do .NET 9 no WSL. Execute o comando abaixo:
sudo apt-get update
sudo apt-get install -y dotnet-sdk-9.0
# Para o runtime
sudo apt-get update
sudo apt-get install -y aspnetcore-runtime-9.0


# Criar migrations

dotnet ef migrations add 'Inicial'
dotnet ef database update

# REMOVE MIGRATIONS #

* Step 1: Restore to a previous migration

	If you haven't yet applied your migration you can skip this part. To restore your database schema to a previous point issue the Update-Database command with -TargetMigration option to specify the last good migration. For EFCore use Update-Database "Name-of-Migration"

	If your entity framework code resides in a different project in your solution, you may need to use the '-Project' option or switch the default project in the package manager console.

	Update-Database –TargetMigration: <name of last good migration>
	For EFCore:

	Update-Database <name of last good migration>

* Step 2: Delete your migration from the project

	If you are using Entity Framework Core you can use the 'remove-migration' command, for Entity Framework, delete the files of the unwanted migration in your EF project 'Migrations' folder manually. At this point, you are free to create a new migration and apply it to the database.

	For EFCore:

	remove-migration name_of_bad_migration
	Step 3: Add your new migration

	add-migration my_new_migration
	Step 4: Apply your migration to the database

	update-database



# Database access

CREATE USER admin@'william-laptop' IDENTIFIED BY '123';
SHOW GRANTS for admin@'william-laptop';
GRANT ALL PRIVILEGES ON auth_turkey.* TO admin@'william-laptop';
SELECT * FROM mysql.global_priv; -- Consulta todos os usuarios cadastrados
DROP USER 'admin'@'laptop-william';



# MariaDB performance

// Exibe multiplas métricas
SHOW STATUS LIKE '%connect%';

// Exibe conexões abertas
SHOW STATUS LIKE '%connect%';

// Exibe detalhes de cada conexão aberta
show processlist;


#Configurações de performance MariaDB. Referencia: https://mariadb.com/kb/en/mariadb-memory-allocation/ e https://mariadb.com/kb/en/server-system-variables
Arquivo de configuração: 
	Windows: C:\Program Files\MariaDB 11.7\data
	Linux: /etc/my.cnf

Para ver os stats do key_buffer
	SHOW GLOBAL STATUS LIKE 'Key%';

Para ver os stats do Query_Cacher:
	SHOW VARIABLES LIKE 'have_query_cache';
	SHOW GLOBAL STATUS LIKE 'Qc%';

	Configuração razoavel:
		# Set query_cache_size to a specific size (e.g., 64MB)
		query_cache_size = 64M

		# Optionally, you can also set the query_cache_type to enable or disable the cache.
		query_cache_type = 1  # Enable caching (0 to disable, 1 to enable, 2 for DEMAND)

Arquivo ini:
[mysqld]
datadir=C:/Program Files/MariaDB 11.7/data
port=3306
innodb_buffer_pool_size=4084M
query_cache_type = 1
query_cache_size=64M
character-set-server=utf8mb4
[client]
port=3306
plugin-dir=C:\Program Files\MariaDB 11.7/lib/plugin


# Connection Pooling

// O .NET por padrão possui uma implementação de pooling.
// Para toda conexão criada, o .NET mantém ela aberta por 3 minutos para ser reutilizada.



